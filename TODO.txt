TODO
====

Might be trivial
----------------

 * Remove indentation for json output format of MATT
   This is just an option on the Json output class, made it optional as it help for debug to get more readable files.
 * Migrate /XXX.json dynamic files into a /data/ subdirectory to be more clean

Not so much work
----------------

 * Add support for mmap/munmap/mremap
   Need to track overlap and gaps on munmap to track the memory it frees.
 * Add usage of stack ID infos in time charts. Need to add them with time classes
 * Add counters on malloc/realloc/... functions (ideally per thread)
 * Add password in GUI to protect access.
 * Add option MATT_SLIENT to remove output.
 * Add option to filter exe for instr
 * Add option to not instrument childs.
 * Do reuse of per thread structure
 * Use the new temporal class to capture request/virtual/physical memory over time.
 * Maybe try to add onfly compression of .json files.
 * Add way to override all options via env variable (MATT_OPTIONS="") and content with "stack.resolve=true;stack.XXX=YY;"
 * Use a dynamic lib to load tracer reader into node instead of using process output forward, might bt ok by using nodejs c++ wrappers
 * Permit to mark some user function as alloc function for inclusive/exclusive (ideally, click on function and 'mark as alloc wrapper')
   It might apply in isAllocFunction()
 * Remove the libs virtual memorty in virtual memory charts ?
 
Need work
---------

 * Maybe store the stack tree as a tree instead of list of call stack (can reduce output file size of a factor 2), but
   need some patch in GUI to rebuild the list representation used everywhere.
   Not so much work for the lib side as there is a tree class already available, but might need some work on the webview side.
   A first step might be to juste regenerate the current format in memory when loading the file in the client MattProject class.
 * Add profiling of physical/virtual ratio
   Expect to use move_pages but not usable when NUMA is disable, need to use /proc/PID/pagemap
 * Add profiling of NUMA mappings
 * Fix numbering of .trace files in MPI mode (it use PID instead of rank)
   Delay open after MPI_Init. Need to manage the fact that the buffer might be too small if too
   much allocations are done before.
 * In webview, page for source annotations : add tree view of costs for call site (by default when source are not availables)
 * Integration of tracer. Need to call the reader through node and return the informations in GUI. Interesting to do :
    - possibility to get memory used at some timestep by each call stacks (return ids, chunk count and memory size), partially done in trace reader
    - possibility to get the time chart of a specific call site
    - possibility to get size distribution of a specific call site and maybe timestep
 * Need to add integration of trace system into webview
