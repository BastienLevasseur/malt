<%
	var MATT_POWER_PS  = ['&nbsp;','K','M','G','T','P'];
	var MATT_POWER_NPS = [' ','K','M','G','T','P'];

	/** Short helper to convert values to human readable format **/	
	function humanReadableValue(value,unit,protectedSpace)
	{
		var power = 0;
		while (value >= 1024)
		{
			power++;
			value /= 1024;
		}
		
		if (power > 0)
			value = value.toFixed(1)
		
		var res;
		if (protectedSpace)
			res = value + " " + MATT_POWER_PS[power] + unit;
		else
			res = value + " " + MATT_POWER_NPS[power] + unit;

		return res;
	}
%>

<% if (info.total != undefined) {%>
	<div><b>Total :</b></div>
	
	<% if (info.total != undefined && info.total.alloc != undefined && info.total.alloc.count > 0) { %>
		<div>Allocated memory : <%= humanReadableValue(info.total.alloc.sum,'B') %></div>
	<% } %>

	<% if (info.total != undefined && info.total.free != undefined && info.total.free.count > 0) { %>
		<div>Freed memory : <%= humanReadableValue(info.total.free.sum,'B') %></div>
	<% } %>
	
	<% if (info.total != undefined && info.total.lifetime != undefined && info.total.maxAliveReq > 0) { %>
		<div>Max alive memory : <%= humanReadableValue(info.total.maxAliveReq,'') %></div>
	<% } %>

	<% if (info.total != undefined && info.total.aliveReq != undefined && info.total.aliveReq > 0) { %>
		<div>Leaks : <%= info.total.aliveReq %></div>
	<% } %>
	
	<% if (info.total != undefined && info.total.alloc != undefined && info.total.alloc.count > 0) { %>
		<div><%= humanReadableValue(info.total.alloc.count,'') %> alloc : [ <%= humanReadableValue(info.total.alloc.min,'B') %> , <%= humanReadableValue(Math.round(info.total.alloc.sum / info.total.alloc.count),'B') %> , <%= humanReadableValue(info.total.alloc.max,'B') %> ]</div>
	<% } %>
	
	<% if (info.total != undefined && info.total.free != undefined && info.total.free.count > 0) { %>
		<div><%= humanReadableValue(info.total.free.count,'') %> free : [ <%= humanReadableValue(info.total.free.min,'B') %> , <%=  humanReadableValue(Math.round(info.total.free.sum / info.total.free.count),'B') %> , <%= humanReadableValue(info.total.free.max,'B') %> ]</div>
	<% } %>
	
	<% if (info.total != undefined && info.total.lifetime != undefined && info.total.maxAliveReq > 0) { %>
		<div>Lifetime : [ <%= humanReadableValue(info.total.lifetime.min,'') %> , <%= humanReadableValue(Math.round(info.total.lifetime.sum / info.total.lifetime.count),'') %> , <%= humanReadableValue(info.total.lifetime.max ,'') %> ] (cycles)</div>
	<% } %>
<% } %>

<% if (info.own != undefined) {%>
	<div><b>Own :</b></div>
	
	<% if (info.own != undefined && info.own.alloc != undefined && info.own.alloc.count > 0) { %>
		<div>Allocated memory : <%= humanReadableValue(info.own.alloc.sum,'B') %></div>
	<% } %>

	<% if (info.own != undefined && info.own.free != undefined && info.own.free.count > 0) { %>
		<div>Freed memory : <%= humanReadableValue(info.own.free.sum,'B') %></div>
	<% } %>
	
	<% if (info.own != undefined && info.own.lifetime != undefined && info.own.maxAliveReq > 0) { %>
		<div>Max alive memory : <%= humanReadableValue(info.own.maxAliveReq,'') %></div>
	<% } %>

	<% if (info.own != undefined && info.own.aliveReq != undefined && info.own.aliveReq > 0) { %>
		<div>Leaks : <%= info.own.aliveReq %></div>
	<% } %>
	
	<% if (info.own != undefined && info.own.alloc != undefined && info.own.alloc.count > 0) { %>
		<div><%= humanReadableValue(info.own.alloc.count,'') %> alloc : [ <%= humanReadableValue(info.own.alloc.min,'B') %> , <%= humanReadableValue(Math.round(info.own.alloc.sum / info.own.alloc.count),'B') %> , <%= humanReadableValue(info.own.alloc.max,'B') %> ]</div>
	<% } %>
	
	<% if (info.own != undefined && info.own.free != undefined && info.own.free.count > 0) { %>
		<div><%= humanReadableValue(info.own.free.count,'') %> free : [ <%= humanReadableValue(info.own.free.min,'B') %> , <%=  humanReadableValue(Math.round(info.own.free.sum / info.own.free.count),'B') %> , <%= humanReadableValue(info.own.free.max,'B') %> ]</div>
	<% } %>
	
	<% if (info.own != undefined && info.own.lifetime != undefined && info.own.maxAliveReq > 0) { %>
		<div>Lifetime : [ <%= humanReadableValue(info.own.lifetime.min,'') %> , <%= humanReadableValue(Math.round(info.own.lifetime.sum / info.own.lifetime.count),'') %> , <%= humanReadableValue(info.own.lifetime.max ,'') %> ] (cycles)</div>
	<% } %>
<% } %>

