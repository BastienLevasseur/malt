<% layout('page-layout') -%>
<% script('deps/d3js/d3.min.js') -%>

<!-- Files to manage func lists -->
<% script('func-list/func-list-selector.js') -%>
<% script('func-list/func-list-view.js') -%>

<!-- ********** SHORT HELPER FUNCTION TO RUN ON SERVER SIDE ****** -->
<%
var MATT_POWER_PS  = ['&nbsp;','K','M','G','T','P'];
var MATT_POWER_NPS = [' ','K','M','G','T','P'];
function mattHumanReadableValue(value,unit,protectedSpace)
{
		var power = 0;
		while (value >= 1024)
		{
			power++;
			value /= 1024;
		}

		var res;
		if (protectedSpace)
			res = value.toFixed(1) + " " + MATT_POWER_PS[power] + unit;
		else
			res = value.toFixed(1) + " " + MATT_POWER_NPS[power] + unit;

		return res;
}
%>

<!-- ****************** STACK ANALYSER *************** -->
<div class="container-fluid">
	<div>
		<!-- Global summary -->
		<h2>Global statistics</h2>
		<table class='table-func-list'>
			<tr>
				<th>Metric</th>
				<th>Value</th>
			</tr>
			<tr>
				<td>Max virtual memory</td>
				<td class='size'><%= mattHumanReadableValue(globalStats.virtualMem,'B') %></td>
			</tr>
			<tr>
				<td>Max physical memory</td>
				<td class='size'><%= mattHumanReadableValue(globalStats.physicalMem,'B') %></td>
			</tr>
			<tr>
				<td>Max requested memory</td>
				<td class='size'><%= mattHumanReadableValue(globalStats.requestedMem,'B') %></td>
			</tr>
			<tr>
				<td>Allocations</td>
				<td class='size'><%= mattHumanReadableValue(globalStats.count,'') %></td>
			</tr>
			<tr>
				<td>Max alive objects</td>
				<td class='size'></td>
			</tr>
			<tr>
				<td>Smallest allocations</td>
				<td class='size'><%= mattHumanReadableValue(globalStats.minChunkSize,'B') %></td>
			</tr>
			<tr>
				<td>Largest allocations</td>
				<td class='size'><%= mattHumanReadableValue(globalStats.maxChunkSize,'B') %></td>
			</tr>
			<tr>
				<td>Largest stack</td>
				<td class='size'><%= mattHumanReadableValue(globalStats.largestStack,'B') %></td>
			</tr>
		</table>
	</div>
	
	<!-- Top functions -->
	<div>
		<h2>Alloc numbers</h2>
		<div id='table-func-list-count'/>
	</div>
	<div>
		<h2>Allocated memory</h2>
		<div id='table-func-list-mem'/>
	</div>
	<div>
		<h2>Peak memory</h2>
		<div id='table-func-list-peak'/>
	</div>
	<div>
		<h2>Leaks</h2>
		<div id='table-func-list-leaks'/>
	</div>
	<div>
		<h2>Smallest allocations</h2>
		<div id='table-func-list-min'/>
	</div>
</div>

<!-- Main script to run on page load -->
<script type='text/javascript'>
	$( document ).ready(function() {
		//alloc count
		var funcListSelectorCount = new MattFuncListSelector({sort:'asc',selected:'alloc.count',mode:'own'});
		var mattFuncListCount = new MattFuncListView('table-func-list-count',funcListSelectorCount);
		
		//allocated mem
		var funcListSelectorMem = new MattFuncListSelector({sort:'asc',selected:'alloc.sum',mode:'own'});
		var mattFuncListMem = new MattFuncListView('table-func-list-mem',funcListSelectorMem);
		
		//allocated mem
		var funcListSelectorMin = new MattFuncListSelector({sort:'desc',selected:'alloc.min',mode:'own'});
		var mattFuncListMin = new MattFuncListView('table-func-list-min',funcListSelectorMin);
		
		//allocated leaks
		var funcListSelectorLeaks = new MattFuncListSelector({sort:'asc',selected:'leaks',mode:'own'});
		var mattFuncListLeaks = new MattFuncListView('table-func-list-leaks',funcListSelectorLeaks);
		
		//allocated peak
		var funcListSelectorPeak = new MattFuncListSelector({sort:'asc',selected:'alivemem',mode:'own'});
		var mattFuncListPeak = new MattFuncListView('table-func-list-peak',funcListSelectorPeak);
	
		//use common data for all objs to limit request numbers
		$.getJSON( "flat.json", function( data ) {
			mattFuncListCount.setData(data);
			mattFuncListMem.setData(data);
			mattFuncListMin.setData(data);
			mattFuncListLeaks.setData(data);
			mattFuncListPeak.setData(data);
		});
	});
</script>
