<% layout('page-layout') -%>

<!-- Files to manage func lists -->
<% script('func-list-selector.js') -%>
<% script('func-list-view.js') -%>

<% script('deps/d3js/d3.min.js') -%>

<!-- ********** SHORT HELPER FUNCTION TO RUN ON SERVER SIDE ****** -->
<%
var MATT_POWER_PS  = ['&nbsp;','K','M','G','T','P'];
var MATT_POWER_NPS = [' ','K','M','G','T','P'];
function mattHumanReadableValue(value,unit,protectedSpace)
{
		var power = 0;
		while (value >= 1024)
		{
			power++;
			value /= 1024;
		}

		var res;
		if (protectedSpace)
			res = value.toFixed(1) + " " + MATT_POWER_PS[power] + unit;
		else
			res = value.toFixed(1) + " " + MATT_POWER_NPS[power] + unit;

		return res;
}
%>

<style type='text/css'>
.axis text {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.bar {
  fill: steelblue;
  fill-opacity: .9;
}

.x.axis path {
  display: none;
}

label {
  position: absolute;
  top: 10px;
  right: 10px;
}
</style>

<!-- ****************** STACK ANALYSER *************** -->
<div class="container-fluid">
	<div>
		<!-- Global summary -->
		<h2>Most used sizes</h2>
		<input type="checkbox"> Sort values
		<svg id='graph'/>
	</div>

	<div>
		<!-- Global summary -->
		<h2>All sizes</h2>
		<table class='table-func-list' id='table-global-summary'>
			<tr>
				<th>Chunk size</th>
				<th>Count</th>
			</tr>
			<%
			var sortedSizeMap = [];
			for (var i in sizeMap)
				sortedSizeMap.push({size:(+i),count:(+sizeMap[i])});
			sortedSizeMap.sort(function(a,b){return (b.count) - (a.count);});
			%>
			<% for(var i in sortedSizeMap) {%>
				<tr>
					<td><%= mattHumanReadableValue(sortedSizeMap[i].size,'B') %></td>
					<td class='size'><%= mattHumanReadableValue(sortedSizeMap[i].count,'') %></td>
				</tr>
			<% } %>
		</table>
	</div>
</div>

<script>
$( document ).ready(function() {

	var margin = {top: 20, right: 20, bottom: 30, left: 60},
		width = 960 - margin.left - margin.right,
		height = 500 - margin.top - margin.bottom;

	var formatPercent = d3.format(".0");

	var x = d3.scale.ordinal()
		.rangeRoundBands([0, width], .1, 1);

	var y = d3.scale.linear()
		.range([height, 0]);

	var xAxis = d3.svg.axis()
		.scale(x)
		.orient("bottom");

	var yAxis = d3.svg.axis()
		.scale(y)
		.orient("left")
		.tickFormat(formatPercent);

	var svg = d3.select("#graph")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.top + margin.bottom)
	.append("g")
		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");


	$.getJSON("/size-map.json",function(data){
		var formattedData = [];
		var cnt = 0;
		var max = 0;
		
		for(var i in data)
			if (data[i] > max)
				max = data[i];
		//alert(max);
		
		for(var i in data)
		{
			//alert(i + " -> " + data[i]);
			if (data[i] > max/1000)
			{
				formattedData.push({size:+i,frequency:+data[i]});
				cnt ++;
				if (cnt > 50)
					break;
			}
		}
		
		data = formattedData;
		//alert(JSON.stringify(data));

		x.domain(data.map(function(d) { return d.size; }));
		y.domain([0, d3.max(data, function(d) { return d.frequency; })]);

		svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + height + ")")
			.call(xAxis);

		svg.append("g")
			.attr("class", "y axis")
			.call(yAxis)
			.append("text")
			.attr("transform", "rotate(-90)")
			.attr("y", 6)
			.attr("dy", ".71em")
			.style("text-anchor", "end")
			.text("Frequency");

		svg.selectAll(".bar")
			.data(data)
			.enter().append("rect")
			.attr("class", "bar")
			.attr("x", function(d) { return x(d.size); })
			.attr("width", x.rangeBand())
			.attr("y", function(d) { return y(d.frequency); })
			.attr("height", function(d) { return height - y(d.frequency); });

		d3.select("input").on("change", change);

		var sortTimeout = setTimeout(function() {
			d3.select("input").property("checked", true).each(change);
		}, 500);

		function change() {
			clearTimeout(sortTimeout);

			// Copy-on-write since tweens are evaluated after a delay.
			var x0 = x.domain(data.sort(this.checked
				? function(a, b) { return b.frequency - a.frequency; }
				: function(a, b) { return d3.ascending(a.size, b.size); })
				.map(function(d) { return d.size; }))
				.copy();

			var transition = svg.transition().duration(750),
				delay = function(d, i) { return i * 50; };

			transition.selectAll(".bar")
				.delay(delay)
				.attr("x", function(d) { return x0(d.size); });

			transition.select(".x.axis")
				.call(xAxis)
			.selectAll("g")
				.delay(delay);
		}
	});
});

</script>
