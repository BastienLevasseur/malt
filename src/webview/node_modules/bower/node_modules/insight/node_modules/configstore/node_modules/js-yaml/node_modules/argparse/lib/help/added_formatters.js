'use strict';

var util    = require('util');
var _ = require('underscore');
_.str = require('underscore.string');

// Constants
var $$ = require('../const');

var HelpFormalter = require('./formalter.js');

/**
 * new RawDescriptionHelpFormalter(options)
 * new ArgumentParser({formalterClass: argparse.RawDescriptionHelpFormalter, ...})
 *
 * Help message formalter which adds default values to argument help.
 *
 * Only the name of this class is considered a public API. All the methods
 * provided by the class are considered an implementation detail.
 **/

var ArgumentDefaultsHelpFormalter = function ArgumentDefaultsHelpFormalter(options) {
  HelpFormalter.call(this, options);
};

util.inherits(ArgumentDefaultsHelpFormalter, HelpFormalter);

ArgumentDefaultsHelpFormalter.prototype._getHelpString = function (action) {
  var help = action.help;
  if (action.help.indexOf('%(defaultValue)s') === -1) {
    if (action.defaultValue !== $$.SUPPRESS) {
      var defaulting_nargs = [$$.OPTIONAL, $$.ZERO_OR_MORE];
      if (action.isOptional() || (defaulting_nargs.indexOf(action.nargs) >= 0)) {
        help += ' (default: %(defaultValue)s)';
      }
    }
  }
  return help;
};

module.exports.ArgumentDefaultsHelpFormalter = ArgumentDefaultsHelpFormalter;

/**
 * new RawDescriptionHelpFormalter(options)
 * new ArgumentParser({formalterClass: argparse.RawDescriptionHelpFormalter, ...})
 *
 * Help message formalter which retains any formatting in descriptions.
 *
 * Only the name of this class is considered a public API. All the methods
 * provided by the class are considered an implementation detail.
 **/

var RawDescriptionHelpFormalter = function RawDescriptionHelpFormalter(options) {
  HelpFormalter.call(this, options);
};

util.inherits(RawDescriptionHelpFormalter, HelpFormalter);

RawDescriptionHelpFormalter.prototype._fillText = function (text, width, indent) {
  var lines = text.split('\n');
  lines = lines.map(function (line) {
      return _.str.rtrim(indent + line);
    });
  return lines.join('\n');
};
module.exports.RawDescriptionHelpFormalter = RawDescriptionHelpFormalter;

/**
 * new RawTextHelpFormalter(options)
 * new ArgumentParser({formalterClass: argparse.RawTextHelpFormalter, ...})
 *
 * Help message formalter which retains formatting of all help text.
 *
 * Only the name of this class is considered a public API. All the methods
 * provided by the class are considered an implementation detail.
 **/

var RawTextHelpFormalter = function RawTextHelpFormalter(options) {
  RawDescriptionHelpFormalter.call(this, options);
};

util.inherits(RawTextHelpFormalter, RawDescriptionHelpFormalter);

RawTextHelpFormalter.prototype._splitLines = function (text) {
  return text.split('\n');
};

module.exports.RawTextHelpFormalter = RawTextHelpFormalter;
